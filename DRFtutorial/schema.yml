openapi: 3.0.3
info:
  title: DRF Tutorial
  version: 0.0.0
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/tutorials:
    get:
      operationId: api_tutorials_list
      tags:
      - api
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tutorial'
          description: ''
    post:
      operationId: api_tutorials_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tutorial'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tutorial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tutorial'
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tutorial'
          description: ''
    delete:
      operationId: api_tutorials_destroy
      tags:
      - api
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: No response body
  /api/tutorials/{id}:
    get:
      operationId: api_tutorials_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          pattern: ^[0-9]+$
        required: true
      tags:
      - api
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tutorial'
          description: ''
    put:
      operationId: api_tutorials_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          pattern: ^[0-9]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tutorial'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tutorial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tutorial'
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tutorial'
          description: ''
    delete:
      operationId: api_tutorials_destroy_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
          pattern: ^[0-9]+$
        required: true
      tags:
      - api
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: No response body
  /api/tutorials/published:
    get:
      operationId: api_tutorials_published_list
      tags:
      - api
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tutorial'
          description: ''
  /login/:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /profile/:
    get:
      operationId: profile_list
      description: Handles creating and updating profiles.
      tags:
      - profile
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
          description: ''
    post:
      operationId: profile_create
      description: Handles creating and updating profiles.
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /profile/{id}/:
    get:
      operationId: profile_retrieve
      description: Handles creating and updating profiles.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - profile
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: profile_update
      description: Handles creating and updating profiles.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: profile_partial_update
      description: Handles creating and updating profiles.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    delete:
      operationId: profile_destroy
      description: Handles creating and updating profiles.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user profile.
        required: true
      tags:
      - profile
      security:
      - bearerAuth: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '204':
          description: No response body
  /refresh-token/:
    post:
      operationId: refresh_token_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - refresh-token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /verify-token/:
    post:
      operationId: verify_token_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - verify-token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    PatchedUserProfile:
      type: object
      description: A serializer for our user profile objects.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        name:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
          maxLength: 128
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Tutorial:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 70
        description:
          type: string
          maxLength: 200
        published:
          type: boolean
      required:
      - id
    UserProfile:
      type: object
      description: A serializer for our user profile objects.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        name:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - email
      - id
      - name
      - password
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []